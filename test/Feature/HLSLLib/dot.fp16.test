#--- source.hlsl
StructuredBuffer<half4> X : register(t0);
StructuredBuffer<half4> Y : register(t1);

RWStructuredBuffer<half> Out : register(u2);


[numthreads(1,1,1)]
void main() {
  Out[0] = dot(X[0].x, Y[0].x);
  Out[1] = dot(X[0].xy, Y[0].xy);
  Out[2] = dot(X[0].xyz, Y[0].xyz);
  Out[3] = dot(X[0], Y[0]);

  Out[4] = dot(X[1].x, Y[1].x);
  Out[5] = dot(X[1].xy, Y[1].xy);
  Out[6] = dot(X[1].xyz, Y[1].xyz);
  Out[7] = dot(X[1], Y[1]);
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Float16
    Stride: 8
    Data: [ 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0xc900, 0x0000, 0x0000, 0x4900 ]
    # [ 1, 1, 1, 1, -10, 0, 0, 10 ]
  - Name: Y
    Format: Float16
    Stride: 8
    Data: [ 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0x4900, 0x0000, 0x0000, 0x4900 ]
    # [ 1, 1, 1, 1, 10, 0, 0, 10 ]
  - Name: Out
    Format: Float16
    Stride: 8
    ZeroInitSize: 16
  - Name: ExpectedOut
    Format: Float16
    Stride: 8
    Data: [ 0x3C00, 0x4000, 0x4200, 0x4400, 0xd640, 0xd640, 0xd640, 0x0000 ]
    # [ 1, 2, 3, 4, -100, -100, -100, 0 ]
Results:
  - Result: Test1
    Rule: BufferFloatEpsilon
    Epsilon: 0.0008
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
#--- end

# REQUIRES: Half
# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
